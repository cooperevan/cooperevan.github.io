---
title: "Project"
format: html
---

```{r, warning=FALSE, message=FALSE}
library(httr)
library(rStrava)
library(dplyr)
library(leaflet)
library(htmlwidgets)
library(googleway) 
library(mapview)
library(webshot)
```

```{r}
app_name <- 'evanstrava' # chosen by user
app_client_id  <- '162797' # an integer, assigned by Strava
app_secret <- '81a499b604a026d0a5fad0be6faf02266f663749' # an alphanumeric secret, assigned by Strava

stoken <- readRDS("strava_token.rds")
```

```{r, eval=FALSE}
# create the authentication token
stoken <- httr::config(token = strava_oauth(app_name, 
                                            app_client_id, 
                                            app_secret, 
                                            app_scope="activity:read_all", 
                                            cache = TRUE))
saveRDS(stoken, "strava_token.rds")
```

```{r}
my_data  <- get_activity_list(stoken)
act_data <- compile_activities(my_data)

keeps   <- c('map.summary_polyline', 'upload_id')
my_acts <- select(act_data, match(keeps, names(act_data)))

#setting the map
map <- leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
  addProviderTiles('CartoDB.Positron',
                   options = providerTileOptions(noWrap = TRUE, minZoom = 12, maxZoom = 18)) %>%
  setView(lng = -119.8606, 
          lat = 34.4133, 
          zoom = 14)

#loop in data using DC code
loop <- unique(my_acts$upload_id)
for (i in loop) {
  activity <- filter(my_acts, upload_id == i)
  coords   <- googleway::decode_pl(activity$map.summary_polyline)
  map      <- addPolylines(map, lng = coords$lon, lat = coords$lat,
                      color = 'darkorange', opacity = 1/4, weight = 2)
}

map

saveWidget(map, file="runningmap.html") #export the final map
```

